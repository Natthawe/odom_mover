import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf_transformations import euler_from_quaternion
import math


class YawController(Node):
    def __init__(self):
        super().__init__('yaw_controller')

        # Publisher: ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà cmd_vel
        self.cmd_pub = self.create_publisher(Twist, '/cmd_vel', 10)

        # Subscriber: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ odometry
        self.odom_sub = self.create_subscription(Odometry, '/odom', self.odom_callback, 10)

        self.timer = self.create_timer(0.05, self.control_loop)

        # State
        self.current_yaw = 0.0
        self.goal_yaw = math.radians(45)  # üîÑ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏°‡∏∏‡∏ô 90 ‡∏≠‡∏á‡∏®‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
        self.reached = False

    def odom_callback(self, msg):
        # ‡πÅ‡∏õ‡∏•‡∏á quaternion ‚Üí euler ‚Üí yaw
        q = msg.pose.pose.orientation
        _, _, yaw = euler_from_quaternion([q.x, q.y, q.z, q.w])
        self.current_yaw = yaw

    def shortest_angular_distance(self, current, target):
        diff = (target - current + math.pi) % (2 * math.pi) - math.pi
        return diff

    def control_loop(self):
        if self.reached:
            return

        yaw_diff = self.shortest_angular_distance(self.current_yaw, self.goal_yaw)

        cmd = Twist()

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏∏‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏≠‡∏á‡∏®‡∏≤)
        if abs(yaw_diff) < math.radians(2):
            self.get_logger().info("‚úÖ Reached goal yaw")
            self.reached = True
            cmd.angular.z = 0.0
        else:
            # ‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏°‡∏∏‡∏°)
            cmd.angular.z = 0.5 * yaw_diff  # ‡∏õ‡∏£‡∏±‡∏ö gain ‡πÑ‡∏î‡πâ

        self.cmd_pub.publish(cmd)


def main():
    rclpy.init()
    node = YawController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
